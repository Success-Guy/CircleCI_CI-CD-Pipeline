version: 2.1
orbs:
  # node: 'circleci/node:4.1'
  slack: circleci/slack@4.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack \
              --stack-name udapeople-front-end-${CIRCLE_WORKFLOW_ID:0:7}
      
    ## ssh key "d2:e2:97:f4:a7:4b:fa:dc:39:1c:5f:b8:68:4f:40:dd"
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czf artifact.tar.gz .
            ls -a1l 
            mv artifact.tar.gz build/
      - save_cache:
          key: backend
          paths: [backend/node_modules]

      - persist_to_workspace:
          root: ~/
          paths:
            - project/build/artifact.tar.gz
      
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker: 
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Test
          command: |
            cd frontend
            npm run test
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run:
          name: Run Test
          command: |
            cd backend
            # npm install
            npm run test
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      - run:
          name: test
          command: |
            cd frontend
            npm install
            # npm update --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend]
      - run:
          name: test
          command: |
            cd backend
            npm update --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      - slack/notify:
          channel: 03-cloud-devops
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:  yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend 

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --filter "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["d2:e2:97:f4:a7:4b:fa:dc:39:1c:5f:b8:68:4f:40:dd"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend]
      - run:
          name: Run migrations
          command: |
            cd backend
            # npm install            
            # Run and save the migration output
            npm run migrations > ~/project/migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/58fRof4A9RFYtqSkSHUr/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/migrations_dump.txt
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
            yum install -y gzip
            yum install -y tar
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filter "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment     
      # Here's where you will add some code to rollback on failure 
  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["d2:e2:97:f4:a7:4b:fa:dc:39:1c:5f:b8:68:4f:40:dd"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            # apk add --update nodejs
            # apk add --update npm
            # apk add --update tar
            # apk add --update gzip
      - restore_cache:
          keys: [backend]
      - attach_workspace:
          at: ~/
      - run:
          name: Prepare deploy
          command: |
            # cd backend
            # npm install
            # npm run build
            # cd ..
            # Zip the directory
            # tar -C backend -czf artifact.tar.gz .
            ls -al1h build
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      # - destroy-environment

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - attach_workspace"
      #     at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       #  apk add --update curl
      #       #  apk add --update tail
      # - run:
      #     name: Backend smoke test
      #     command: |
      #         tail -1 .circleci/ansible/inventory.txt
      #         export BACKEND_IP=$(tail -1 .circleci/ansible/inventory.txt)
      #         export BACKEND_URL="http://${BACKEND_IP}:3030/api/status"
      #         echo ${BACKEND_URL}
      #         # if curl -s ${BACKEND_URL} | grep "ok"
      #         if curl "http://${BACKEND_IP}:3030/api/status" | grep "ok"
      #         then
      #             return 0
      #         else
      #             return 1
      #         fi

      - run:
          name: Frontend smoke test.
          command: |
              # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              URL="http://udapeople-e602bda.s3-website-us-east-1.amazonaws.com/#/employees"            
                echo ${URL} 
                if curl -s ${URL} | grep "Welcome"
                then
                    # Change this to 0 after the job fails
                  return 0
                else
                  return 1
                fi
      - destroy-environment
              

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]

      - smoke-test
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]